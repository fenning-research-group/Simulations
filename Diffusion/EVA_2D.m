% EVA_2D runs a 2-d diffusion simulation for water in Ethylene Vinyl
% Acetate. Parameters can be set within the code script, or via the command
% window during runtime by adding a flag during function call (EVA_2D(1),
% for example).
%
% Outputs two pieces of data:
%   1.  the average water concentration across the sample area at the end of
%       simulation, in g/cm^3
%   2.  the mapped water concentration across the sample area at the end of
%       simulation, in g/cm^3. This is a 3d matrix. First z layer is water
%       content, second z layer is x coordinate, third z layer is y coordinate.
function [ending_avg_wc, wc_map, frame] = EVA_2D(varargin)

% Simulating the 2-D Diffusion equation by the Finite Difference
...Method 
% Numerical scheme used is a first order upwind in time and a second
...order central difference in space (Implicit and Explicit)

%% User-specified parameters
x_dim = 3;                      %sample x width in centimeters
y_dim = 3;                      %sample y width in centimeters
nx=50;                         %Number of steps in space(x)
ny=50;                         %Number of steps in space(y)
nt=100;                         %Number of time steps
initial_condition = [23, 60];   %initial temperature/humidity condition of sample. For starting concentrations, assuming at equilibrium
conditions = [  50, 0, 2*24;...
                85, 40, 6*24;...
                23, 40, 4*24;...
                85, 40, 8*24;...
                85, 50, 8*24;...
                85, 60, 8*24;...
                23, 20, 0.75;...
                ];       %all conditions sample is exposed to. format is [T_1, RH_1, Time_1 (hours); T_2, RH_2, Time_2 (hours)], etc.
% 
% conditions = [38, 60, 240;...
%               23, 60, 1];
%% User input parameters if flagged during function call, otherwise use values defined above
if ~isempty(varargin)
    conditions = [];        %reset to clear conditions defin ed within code
    fprintf('--- Simulation Parameters for 2-D Water Diffusivity in EVA ---\n');
    x_dim = input('X width (cm): ');
    y_dim = input('Y depth (cm): ');
    nx = input('# of X mesh points: ');
    ny = input('# of Y mesh points: ');
    nt = input('# of time points: ');
    initial_condition = input('Temperature of Initial Sample Condition (C): ');
    initial_condition(2) = input('Relative Humidity of Initial Sample Condition (%) ');
    another_condition = 'y';
    counter = 1;
    while ~strcmp(another_condition, 'N') && ~strcmp(another_condition, 'n')
        fprintf('\nStep %d:\n', counter);
        conditions(counter, 1) = input(sprintf('\tTemperature (C): '));
        conditions(counter, 2) = input(sprintf('\tRelative Humidity (%%): '));
        conditions(counter, 3) = input(sprintf('\tDuration (hrs): '));
        another_condition = input('Add Another Step (y/n): ', 's');
        counter = 2;
    end
end


%% Computed Parameters
total_time = sum(conditions(:,3))*3600;     %total simulation time, converted to seconds
condition_change_step = zeros(numel(conditions(:,3))+1, 1);
for i = 2:numel(conditions(:,3))
    condition_change_step(i) = (sum(conditions(1:i-1, 3))*3600)/total_time * nt;
end
condition_change_step(end) = inf;
dt=total_time/nt;               %Width of each time step
dx=x_dim/(nx-1);                %Width of space step(x)
dy=y_dim/(ny-1);                %Width of space step(y)
x=0:dx:x_dim;                   %Range of x(0,2) and specifying the grid points
y=0:dy:y_dim;                   %Range of y(0,2) and specifying the grid points
u=zeros(nx,ny);                 %Preallocating u
un=zeros(nx,ny);                %Preallocating un
% vis=0.1;                      %Diffusion coefficient/viscocity
diffusivity = 0.001353*exp(-0.191.*(1./(273.15+conditions(:,1)))/(8.617e-5));                          %ASU uptake fit 2018-11-27     
saturation_content = 3.612*exp(-2414.*(1./(273.15+conditions(:,1)))) .* conditions(:,2)/100;           %function generated by exponential fit of saturation data from ASU water loss in room conditions. (20180822). assuming Henrian, need to adjust eq to use vapor and water contents separately
zmax = max(saturation_content);

initial_content = 2.889*exp(-2264.*(1/(273.15+initial_condition(1)))) .* initial_condition(2)/100;                            %x=0 Dirichlet B.C 


% UnW=0;                           %x=0 Neumann B.C (du/dn=UnW)
% UnE=0;                           %x=L Neumann B.C (du/dn=UnE)
% UnS=0;                           %y=0 Neumann B.C (du/dn=UnS)
% UnN=0;                           %y=L Neumann B.C (du/dn=UnN)

%% Initial Conditions
for i=1:nx
    for j=1:ny
        if ((1<=y(j))&&(y(j)<=1)&&(1<=x(i))&&(x(i)<=1))
            u(i,j)= initial_content;
        else
            u(i,j)=initial_content;
        end
    end
end

current_condition = 1;
%% B.C vector
UW = saturation_content(1);
UE = saturation_content(1);
UN = saturation_content(1);
US = saturation_content(1);
vis = diffusivity(1);
bc=zeros(nx-2,ny-2);
bc(1,:)=UW/dx^2; bc(nx-2,:)=UE/dx^2;  %Dirichlet B.Cs
bc(:,1)=US/dy^2; bc(:,ny-2)=UN/dy^2;  %Dirichlet B.Cs
%bc(1,:)=-UnW/dx; bc(nx-2,:)=UnE/dx;  %Neumann B.Cs
%bc(:,1)=-UnS/dy; bc(:,nx-2)=UnN/dy;  %Neumann B.Cs
%B.Cs at the corners:
bc(1,1)=UW/dx^2+US/dy^2; bc(nx-2,1)=UE/dx^2+US/dy^2;
bc(1,ny-2)=UW/dx^2+UN/dy^2; bc(nx-2,ny-2)=UE/dx^2+UN/dy^2;
bc=vis*dt*bc;

%Calculating the coefficient matrix for the implicit scheme
Ex=sparse(2:nx-2,1:nx-3,1,nx-2,nx-2);
Ax=Ex+Ex'-2*speye(nx-2);        %Dirichlet B.Cs
%Ax(1,1)=-1; Ax(nx-2,nx-2)=-1;  %Neumann B.Cs
Ey=sparse(2:ny-2,1:ny-3,1,ny-2,ny-2);
Ay=Ey+Ey'-2*speye(ny-2);        %Dirichlet B.Cs
%Ay(1,1)=-1; Ay(ny-2,ny-2)=-1;  %Neumann B.Cs
A=kron(Ay/dy^2,speye(nx-2))+kron(speye(ny-2),Ax/dx^2);
D=speye((nx-2)*(ny-2))-vis*dt*A;

%% Initializing Graphs
    hfig = figure;
   
    watermap = subplot(2,1,1);
    h=surf(x,y,u','EdgeColor','none');       %plotting the field variable
    shading interp
    color_scale = cbrewer('div', 'RdBu', 256);
    colormap(color_scale)
    caxis([0 zmax]);
    hcbar = colorbar;
    title(hcbar, 'g/cm^3');
    axis ([0 x_dim 0 y_dim 0 zmax])
    xlabel('X (cm)');
    ylabel('Y (cm)');
    zlabel({'Water Content in', 'EVA (g/cm^3)'});
    
    metrics = subplot(2,1,2);
    
    subplot(metrics)
    time_pts = [0, conditions(1,3)];
    temp = [conditions(1,1),conditions(1,1)];
    relhum = [conditions(1,2),conditions(1,2)];
    for i = 1:numel(conditions(:,3))-1
        time_pts = [time_pts, sum(conditions(1:i, 3)), sum(conditions(1:i+1, 3))];
        temp = [temp, conditions(i+1,1), conditions(i+1, 1)];
        relhum = [relhum, conditions(i+1,2), conditions(i+1, 2)];
    end
    time_pts = [time_pts, total_time/3600];
    temp = [temp, conditions(end,1)];
    relhum = [relhum, conditions(end, 2)];
    
    yyaxis right;
    hold on;
    plot(time_pts, temp, 'r:');
    plot(time_pts, relhum, 'b:');
    xlim([0 total_time/3600]);
    ylabel('Conditions');
%     legend({'Temperature \circC', 'Relative Humidity (%)'});
    yyaxis left;
    xlabel('Time (hours)');
    ylabel({'Average Water Content', 'in EVA (g/cm^3)'});
    ylim([0 zmax]);
    hold on
    timepoints = [];
    average_water_content = [];
    
    prettyplot('twoplots');
    
    

%% Calculating water content for each time step
i=2:nx-1;
j=2:ny-1;
for it=0:nt
    if it >= condition_change_step(current_condition+1)
        current_condition = current_condition + 1;
        vis = diffusivity(current_condition);
        UW=saturation_content(current_condition);                            %x=0 Dirichlet B.C 
        UE=saturation_content(current_condition);                            %x=L Dirichlet B.C 
        US=saturation_content(current_condition);                            %y=0 Dirichlet B.C 
        UN=saturation_content(current_condition);                            %y=L Dirichlet B.C 
        bc=zeros(nx-2,ny-2);
        bc(1,:)=UW/dx^2; bc(nx-2,:)=UE/dx^2;  %Dirichlet B.Cs
        bc(:,1)=US/dy^2; bc(:,ny-2)=UN/dy^2;  %Dirichlet B.Cs
        %bc(1,:)=-UnW/dx; bc(nx-2,:)=UnE/dx;  %Neumann B.Cs
        %bc(:,1)=-UnS/dy; bc(:,nx-2)=UnN/dy;  %Neumann B.Cs
        %B.Cs at the corners:
        bc(1,1)=UW/dx^2+US/dy^2; bc(nx-2,1)=UE/dx^2+US/dy^2;
        bc(1,ny-2)=UW/dx^2+UN/dy^2; bc(nx-2,ny-2)=UE/dx^2+UN/dy^2;
        bc=vis*dt*bc;

        %Calculating the coefficient matrix for the implicit scheme 
        Ex=sparse(2:nx-2,1:nx-3,1,nx-2,nx-2);
        Ax=Ex+Ex'-2*speye(nx-2);        %Dirichlet B.Cs
        %Ax(1,1)=-1; Ax(nx-2,nx-2)=-1;  %Neumann B.Cs
        Ey=sparse(2:ny-2,1:ny-3,1,ny-2,ny-2);
        Ay=Ey+Ey'-2*speye(ny-2);        %Dirichlet B.Cs
        %Ay(1,1)=-1; Ay(ny-2,ny-2)=-1;  %Neumann B.Cs
        A=kron(Ay/dy^2,speye(nx-2))+kron(speye(ny-2),Ax/dx^2);
        D=speye((nx-2)*(ny-2))-vis*dt*A;
    end
    un=u;
    subplot(watermap);
    title({['T = ',num2str(conditions(current_condition,1)), '{\circ}C, RH = ', num2str(conditions(current_condition,2)), '%'];['time (\itt) = ',num2str(it*dt/3600), 'hrs']})
    h.ZData = u;
    
    subplot(metrics);
    average_water_content = [average_water_content, mean(u(:))];
    timepoints = [timepoints, it * dt / 3600];
    if(it == 0)
        wc = plot(timepoints, average_water_content*1000, 'k-');
        legend({ 'Water Concentration', 'Temperature', 'Relative Humidity'}, 'Location', 'southeast');
%         legend('boxoff');
    end

    drawnow; 
%     refreshdata(h);
    wc.XData = timepoints;
    wc.YData = average_water_content;
    %Uncomment as necessary
    %Implicit method:
    U=un;U(1,:)=[];U(end,:)=[];U(:,1)=[];U(:,end)=[];
    U=reshape(U+bc,[],1);
    U=D\U;
    U=reshape(U,nx-2,ny-2);
    u(2:nx-1,2:ny-1)=U;
    %Boundary conditions
    %Dirichlet:
    u(1,:)=UW;
    u(nx,:)=UE;
    u(:,1)=US;
    u(:,ny)=UN;
    %Neumann:
    %u(1,:)=u(2,:)-UnW*dx;
    %u(nx,:)=u(nx-1,:)+UnE*dx;
    %u(:,1)=u(:,2)-UnS*dy;c
    %u(:,ny)=u(:,ny-1)+UnN*dy;
    %}
    %Explicit method:
    %{
    u(i,j)=un(i,j)+(vis*dt*(un(i+1,j)-2*un(i,j)+un(i-1,j))/(dx*dx))+(vis*dt*(un(i,j+1)-2*un(i,j)+un(i,j-1))/(dy*dy));
    %Boundary conditions
    %Dirichlet:
    u(1,:)=UW;
    u(nx,:)=UE;
    u(:,1)=US;
    u(:,ny)=UN;
    %Neumann:
    %u(1,:)=u(2,:)-UnW*dx;
    %u(nx,:)=u(nx-1,:)+UnE*dx;
    %u(:,1)=u(:,2)-UnS*dy;
    %u(:,ny)=u(:,ny-1)+UnN*dy;
    %}
%     pause(0.02)
%     frame(it+1) = getframe(hfig);
end

% if isempty(frame)
%     frame = 0;
% end

ending_avg_wc = average_water_content(end);
wc_map = u;
for xidx = 1:nx
    wc_map(xidx,:, 2) = (xidx/nx)*x_dim;
end

for yidx = 1:ny
    wc_map(:, yidx, 3) = (yidx/nx)*y_dim;
end
end